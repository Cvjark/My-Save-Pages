<html>
<head>
<!-- Generated by the Spirit (http://spirit.sf.net) QuickDoc -->
<!-- 由罗聪(http://www.luocong.com)修改部分源代码，以适应中文的需求。 -->
<title>1. 什么是OpCode？</title>
<link rel="stylesheet" href="theme/style.css" type="text/css">
<link rel="prev" href="前言.htm">
<link rel="next" href="2._从哪里开始，到哪里结束.htm">
</head>
<body>
<table width="100%" height="48" border="0" background="theme/bkd2.gif" cellspacing="2">
  <tr>
    <td width="10">
    </td>
    <td width="85%">
      <font size="6" face="Verdana, Arial, Helvetica, sans-serif"><b>1. 什么是OpCode？</b></font>
    </td>
    <td width="112"><a href="http://spirit.sf.net"><img src="theme/spirit.gif" align="right" border="0"></a></td>
  </tr>
</table>
<br>
<table border="0">
  <tr>
    <td width="30"><a href="../index.htm"><img src="theme/u_arr.gif" title="目录" border="0"></a></td>
    <td width="30"><a href="前言.htm"><img src="theme/l_arr.gif" title="上一页" border="0"></a></td>
    <td width="20"><a href="2._从哪里开始，到哪里结束.htm"><img src="theme/r_arr.gif" title="下一页" border="0"></a></td>
   </tr>
</table>
<blockquote><p><i>Things have changed in the past two decades.<br><br></i>
-- Bill Gates(1995)</p></blockquote><a name="什么是OpCode？"></a><h2>什么是OpCode？</h2><p>
不管计算机技术的发展如何日新月异，其最基本的东西是不会突然改变的。OpCode就是这其中的一样东西――因此，Bill Gates的这句话用在这里并不太合适。</p>
<p>
在开始回答什么是OpCode之前，请让我先来提几个小问题。<img src="theme/icon_wink.gif"></img></p>
<ol><li>计算机只认识0和1吗？</li><li>如果上面的回答是“是”，那么我们平时写的程序源代码是0和1吗？</li><li>如果上面的回答是“不是”，那么计算机是怎么“知道”我们的程序的意思的？</li></ol><p>
按顺序作答，依次是：</p>
<ol><li>是</li><li>不是</li><li>？？？</li></ol><p>
最后一个问题的答案是……？我们来举个例子，在汇编语言中：</p>
<code><pre>NOP</pre></code><p>
这条指令很简单，是吧？</p>
<p>
在编译的时候，Assembler会扫描整个源代码。</p>
<p>
在前面我们已经知道了，由于计算机只认识0和1，所以，源代码“NOP”是无法直接运行的。当Assembler遇到“NOP”的时候，为了生成让计算机能运行的“东西”（暂且这样称呼吧），就会以十六进制数“0x90”来代替它。</p>
<p>
在这里，“0x90”就是“<tt>OpCode</tt>”，而“NOP”则是“助记符(<tt>mnemonic</tt>)”。</p>
<table width="80%" border="0" align="center">
  <tr>
    <td class="note_box">
<img src="theme/lens.gif"></img> <b>OpCode的全称</b><br><br>
OpCode就是Operation Code，意即操作码的意思。
    </td>
  </tr>
</table>
<a name="一个OpCode只对应一个助记符吗？"></a><h2>一个OpCode只对应一个助记符吗？</h2><table width="90%" border="0" align="center">  <tr>
  <td class="table_title" colspan="8">
示例：OpCode &amp;&amp; mnemonic  </td>
  </tr>
<tr><td class="table_cells"><b>OpCode</b></td><td class="table_cells"><b>mnemonic</b></td></tr><td class="table_cells">0x90</td><td class="table_cells">NOP</td></tr><td class="table_cells">0x90</td><td class="table_cells">XCHG AX, AX</td></tr><td class="table_cells">0x90</td><td class="table_cells">XCHG EAX, EAX</td></tr></table>
<p>
从上表中可以看出，同一个<tt>OpCode</tt>可以对应N个<tt>mnemonic</tt>。为什么会这样呢？原因现在不必深究，以后自然会明白的。</p>
<a name="一个助记符只对应一个OpCode吗？"></a><h2>一个助记符只对应一个OpCode吗？</h2><table width="90%" border="0" align="center">  <tr>
  <td class="table_title" colspan="8">
示例：OpCode &amp;&amp; mnemonic  </td>
  </tr>
<tr><td class="table_cells"><b>mnemonic</b></td><td class="table_cells"><b>OpCode</b></td></tr><td class="table_cells">ADD EAX, 1</td><td class="table_cells">0x83C001</td></tr><td class="table_cells">ADD EAX, 1</td><td class="table_cells">0x0501000000</td></tr><td class="table_cells">ADD EAX, 1</td><td class="table_cells">0x81C001000000</td></tr></table>
<p>
从上表中也可以看出，同一个<tt>mnemonic</tt>可以对应多个<tt>OpCode</tt>。原因同样留待以后再说。</p>
<table width="80%" border="0" align="center">
  <tr>
    <td class="note_box">
<img src="theme/note.gif"></img> <b>OpCode与mnemonic的关系</b><br><br>
<img src="theme/bullet.gif"></img> 一个<tt>OpCode</tt>不只对应一个<tt>mnemonic</tt>。<br>
<img src="theme/bullet.gif"></img> 一个<tt>mnemonic</tt>不只对应一个<tt>OpCode</tt>。
    </td>
  </tr>
</table>
<a name="OpCode管中窥豹"></a><h2>OpCode管中窥豹</h2><p>
有6个域是OpCode可能会用到的，或者说OpCode是由这6个域组成的――不过请注意：它们的名字是什么，这并不重要――重要的是它们的排列顺序。</p>
<p>
它们是：</p>
<ol><li>Prefixes</li><li>code</li><li>ModR/M</li><li>SIB</li><li>Displacement</li><li>Immediate</li></ol><p>
OpCode的这6个域的详细介绍留待以后再说，现在首先要知道：</p>
<table width="80%" border="0" align="center">
  <tr>
    <td class="note_box">
<img src="theme/alert.gif"></img> 在实际的使用中，并不是这所有的6个域都会被用到的，但是有一项却是一定会有的，那就是第2项：<tt>code</tt>，有些指令甚至只会用到<tt>code</tt>这一项。
    </td>
  </tr>
</table>
<p>
例如：</p>
<table width="90%" border="0" align="center">  <tr>
  <td class="table_title" colspan="10">
OpCode &amp;&amp; mnemonic  </td>
  </tr>
<tr><td class="table_cells"><b>OpCode</b></td><td class="table_cells"><b>mnemonic</b></td></tr><td class="table_cells">0xC3</td><td class="table_cells">RETN</td></tr><td class="table_cells">0x2F</td><td class="table_cells">DAS</td></tr><td class="table_cells">0x90</td><td class="table_cells">NOP</td></tr><td class="table_cells">0xAC</td><td class="table_cells">LODSB</td></tr></table>
<p>
上表中的几个OpCode都只用到了<tt>code</tt>这一项。其中的最后一项：<tt>0xAC</tt>，让我们来看看能不能给它加上一些额外的“东西”：</p>
<code><pre>0x<b>F3AC</b>    REP LODSB</pre></code><p>
可以看到：rep lodsb</p>
<p>
为什么会多了个“<b>rep</b>”呢？是不是由额外的“<b>F3</b>”造成的呢？</p>
<p>
Yes，猜对了，我们来看看它的OpCode格式描述，如下：（注：用{}包围起来的是域的名称）</p>
<code><pre>
<tt>AC</tt> -- {<tt>code</tt>}
<tt>F3 AC</tt> -- {<tt>Prefix</tt>}{<tt>code</tt>}
因此，<tt>F3</tt> 就是域 <u>Prefix</u>
</pre></code><p>
在稍后的章节中我们会知道，<tt>F3</tt>表示的是<u><tt>Rep Prefix</tt></u>，它也能与<tt>movsb</tt>，<tt>stosb</tt>等指令联用，但是，具体细节在这里暂不深究。</p>
<p>
让我再来强调一次：<b>OpCode中的6个域是可选的（除了域<tt>code</tt>之外），不必都用上，但是<tt>code</tt>是一定会有的。</b></p>
<p>
知道了这一点，我们再来看一些例子：</p>
<table width="90%" border="0" align="center">  <tr>
  <td class="table_title" colspan="14">
OpCode &amp;&amp; mnemonic  </td>
  </tr>
<tr><td class="table_cells"><b>OpCode</b></td><td class="table_cells"><b>mnemonic</b></td></tr><td class="table_cells">27</td><td class="table_cells">DAA</td></tr><td class="table_cells">2F</td><td class="table_cells">DAS</td></tr><td class="table_cells">3F</td><td class="table_cells">AAS</td></tr><td class="table_cells">37</td><td class="table_cells">AAA</td></tr><td class="table_cells">D40A</td><td class="table_cells">AAM</td></tr><td class="table_cells">D50A</td><td class="table_cells">AAD</td></tr></table>
<p>
在Intel的文档中，上表中的所有指令都是1字节的，但是，我们能够看到<tt>AAM</tt>和<tt>AAD</tt>是2字节的，到底有什么不同呢？<br>
先不要看下面的答案，试着自己想一想……</p>
<p>
.<br>
.<br>
.<br>
.<br>
.<br>
.<br>
.<br>
.<br>
.<br></p>
<p>
We can see:</p>
<ol><li><tt>AAM</tt>和<tt>AAD</tt>都是2字节的，然而其余的4个指令都是1字节的。</li><li><tt>AAM</tt>和<tt>AAD</tt>的OpCode的第2个字节都是<b>0Ah</b>。</li></ol><p>
如果你还没把大学里的汇编知识彻底还给老师的话<img src="theme/icon_smile.gif"></img>，应该还记得<tt>AAM</tt>和<tt>AAD</tt>的描述：</p>
<code><pre>
<tt>AAM</tt> : divide al by 10
商   放在AH里
余数 放在AL里
</pre></code><code><pre>
<tt>AAD</tt> : AL = AH * 10 + AL
</pre></code><p>
注意到了吗？两者的操作都与10有关。而且两者的OpCode的第二个字节都是10(<b>0Ah</b>)。</p>
<p>
人类与动物的其中一个区别是具有思维的联想性<img src="theme/icon_wink.gif"></img>。聪明的你是不是猜到了什么？</p>
<p>
嗯……<b>0Ah</b>会不会是偶然的呢？它会不会是操作数的一部分？进一步地，<tt>AAM</tt>与<tt>AAD</tt>的指令格式会不会<b>不是</b>：</p>
<code><pre>
<b>D40A</b> for <tt>AAM</tt>
<b>D50A</b> for <tt>AAD</tt>
</pre></code><p>
而是：</p>
<code><pre>
<b>D4</b>:<tt>imm8</tt> for <tt>AAM</tt>
<b>D5</b>:<tt>imm8</tt> for <tt>AAD</tt>
</pre></code><p>
以及，<tt>imm8</tt>可以是任何别的数字呢？（注：<tt>imm8</tt>表示8位的立即数）</p>
<p>
答案是肯定的！</p>
<p>
事实上，我们可以通过反汇编器得知，<b>D407</b>表示的是<tt>AAM</tt> <b>7</b>，<b>D508</b>表示的是<tt>AAD</tt> <b>8</b>，以此类推。</p>
<p>
现在，我们又知道了一种新的指令格式：</p>
<code><pre>
{<tt>code</tt>}{<tt>Immediate</tt>}（域2和域6）
</pre></code><p>
<img src="theme/icon_wink.gif"></img></p>
<p>
还有别的，以后再说。</p>
<a name="There's_Something_We_Should_Know..."></a><h2>There's Something We Should Know...</h2><p>
最后再强调一点：</p>
<ul><li>虽然并不是6个域都是必要的，但是，它们的排列顺序绝对不能乱，必须严格按照上面的顺序进行。有些域也许不会出现，但是只要出现了，编号小的域就绝对不允许出现在编号大的域的后面，反之亦然。</li></ul><p>
例如，{<tt>Prefix</tt>}{<tt>code</tt>}的顺序绝对不允许变成{<tt>code</tt>}{<tt>Prefix</tt>}。</p>
<p>
不相信？举个例子：<b>4004</b>和<b>0440</b>（假设在32位条件下）</p>
<table width="90%" border="0" align="center">  <tr>
  <td class="table_title" colspan="6">
OpCode &amp;&amp; mnemonic  </td>
  </tr>
<tr><td class="table_cells"><b>OpCode</b></td><td class="table_cells"><b>mnemonic</b></td></tr><td class="table_cells">4004</td><td class="table_cells">INC EAX</td></tr><td class="table_cells">0440</td><td class="table_cells">ADD AL, 40h</td></tr></table>
<p>
明白了吗？</p>
<p>
理解了OpCode的规则，将有助于底层程序员明白一些鲜为人知的事情。在接下来的章节中，我们将学习OpCode的6个域的详细信息。</p>
<table border="0">
  <tr>
    <td width="30"><a href="../index.htm"><img src="theme/u_arr.gif" title="目录" border="0"></a></td>
    <td width="30"><a href="前言.htm"><img src="theme/l_arr.gif" title="上一页" border="0"></a></td>
    <td width="20"><a href="2._从哪里开始，到哪里结束.htm"><img src="theme/r_arr.gif" title="下一页" border="0"></a></td>
   </tr>
</table>
<br>
<hr size="1"><table align="center" bordor="0"><tr><td class="copyright">罗聪<br><font size="2"><a href="http://www.luocong.com" target="_blank">www.LuoCong.com</a></font><br><br></td></tr>
<tr><td><font size="2">（注：如果出现链接打不开的情况，请去掉IE浏览器的“<tt><font size="2">工具-&gt;Internet选项-&gt;高级-&gt;总是以UTF-8发送URL</font></tt>”前面的勾。谢谢！）</font></td></tr></table>
</body>
</html>
